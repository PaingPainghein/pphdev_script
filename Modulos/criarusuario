#!/bin/bash
#============================================================
# Script: criarusuario
# Description: Manages SSH and OpenVPN tokens for PPHDEV, optimized for Subscription.java
# Author: @pphdev
#============================================================

# Constants
SERVER_URL="http://youip:89/pphdev/tokens"
IP=$(curl -s http://checkip.amazonaws.com) # Dynamically get server IP
PORT="1194"
cor1='\033[41;1;37m'
cor2='\033[44;1;37m'
scor='\033[0m'

# Initialize required files and directories
init_requirements() {
    sudo mkdir -p /etc/SSHPlus/senha /usr/lib/sshplus /etc/openvpn /root/OVPN
    echo "$IP" | sudo tee /etc/IP >/dev/null
    echo "PPHDEV" | sudo tee /etc/SSHPlus/Token.txt >/dev/null
    sudo touch /root/usuarios.db
    sudo sqlite3 /root/database.db "CREATE TABLE IF NOT EXISTS tokens (id INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, Key TEXT UNIQUE, Valid INTEGER, Expiration TEXT);" 2>/dev/null

    # OpenVPN server configuration
    cat <<EOL | sudo tee /etc/openvpn/server.conf >/dev/null
port $PORT
proto udp
dev tun
ca /etc/openvpn/easy-rsa/pki/ca.crt
cert /etc/openvpn/easy-rsa/pki/issued/server.crt
key /etc/openvpn/easy-rsa/pki/private/server.key
dh /etc/openvpn/easy-rsa/pki/dh2048.pem
server 10.8.0.0 255.255.255.0
push "redirect-gateway def1"
push "dhcp-option DNS 8.8.8.8"
keepalive 10 120
tls-auth /etc/openvpn/ta.key 0
cipher AES-256-CBC
persist-key
persist-tun
status openvpn-status.log
verb 3
EOL

    # OpenVPN client configuration
    cat <<EOL | sudo tee /etc/openvpn/client-common.txt >/dev/null
client
dev tun
proto udp
remote $IP $PORT
resolv-retry infinite
nobind
persist-key
persist-tun
http-proxy-option CUSTOM-HEADER Host portalrecarga.vivo.com.br/recarga
http-proxy $IP 80
EOL
}

# Generate client.ovpn file
newclient() {
    local username="$1"
    cp /etc/openvpn/client-common.txt ~/$username.ovpn
    {
        echo "<ca>"
        cat /etc/openvpn/easy-rsa/pki/ca.crt
        echo "</ca>"
        echo "<cert>"
        cat /etc/openvpn/easy-rsa/pki/issued/$username.crt
        echo "</cert>"
        echo "<key>"
        cat /etc/openvpn/easy-rsa/pki/private/$username.key
        echo "</key>"
        echo "<tls-auth>"
        cat /etc/openvpn/ta.key
        echo "</tls-auth>"
    } >>~/$username.ovpn
}

# Generate OVPN file
fun_geraovpn() {
    local username="$1"
    cd /etc/openvpn/easy-rsa/ || { echo -e "${cor1}Error: Easy-RSA directory not found!${scor}"; exit 1; }
    ./easyrsa build-client-full "$username" nopass >/dev/null 2>&1 || { echo -e "${cor1}Error: Easy-RSA failed to generate client cert!${scor}"; exit 1; }
    newclient "$username"
    if [[ "$respost" =~ ^[sS]$ ]]; then
        password=$(cat /etc/SSHPlus/Token.txt)
        sed -e "s;auth-user-pass;<auth-user-pass>\n$username\n$password\n</auth-user-pass>;g" /root/$username.ovpn >/root/tmp.ovpn && mv -f /root/tmp.ovpn /root/$username.ovpn
    fi
}

# Progress bar
fun_bar() {
    local cmd="$1"
    (
        $cmd >/dev/null 2>&1
        touch $HOME/fim
    ) >/dev/null 2>&1 &
    tput civis
    echo -ne "\033[1;33mPLEASE WAIT \033[1;37m- \033[1;33m["
    while [[ ! -e $HOME/fim ]]; do
        for ((i = 0; i < 18; i++)); do
            echo -ne "\033[1;31m#"
            sleep 0.1
        done
        echo -e "\033[1;33m]"
        tput cuu1
        tput dl1
        echo -ne "\033[1;33mPLEASE WAIT \033[1;37m- \033[1;33m["
    done
    rm $HOME/fim
    echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
    tput cnorm
}

# Host configuration
configure_hosts() {
    local hst="portalrecarga.vivo.com.br/recarga"
    local vivo1="portalrecarga.vivo.com.br/recarga"
    local vivo2="portalrecarga.vivo.com.br/controle/"
    local vivo3="navegue.vivo.com.br/pre/"
    local vivo4="navegue.vivo.com.br/controle/"
    local vivo5="www.vivo.com.br"
    local oi="d1n212ccp6ldpw.cloudfront.net"
    local bypass="net_gateway"
    local payload1='#payload "HTTP/1.0 [crlf]Host: m.youtube.com[crlf]CONNECT HTTP/1.0[crlf][crlf]|[crlf]"'
    local payload2='#payload "CONNECT 127.0.0.1:1194[split][crlf] HTTP/1.0 [crlf][crlf]#"'
    local cert01="/etc/openvpn/client-common.txt"

    case "$hst" in
        "$vivo1") Host="Vivo Recharge" ;;
        "$vivo2") Host="Vivo Control Recharge" ;;
        "$vivo3") Host="Vivo Navigate" ;;
        "$vivo4") Host="Vivo Control Navigate" ;;
        "$vivo5") Host="Vivo MMS" ;;
        "$oi") Host="Oi" ;;
        "$bypass") Host="Bypass Mode" ;;
        "$payload1") Host="OPEN SOCKS" ;;
        "$payload2") Host="OPEN SQUID" ;;
        *) Host="Custom" ;;
    esac
}

# You-server Token ADD
fun_youip_token_add() {
    clear
    tput setaf 7
    tput setab 4
    tput bold
    printf '%30s%s%-15s\n' "Add PPHDEV Token"
    tput sgr0
    echo ""
    echo -ne "\033[1;32mEnter Token Name: \033[1;37m "
    read username
    [[ -z "$username" ]] && { echo -e "\n${cor1}Token name cannot be empty!${scor}\n"; sleep 2; return; }
    [[ "$(grep -wc "$username" /etc/passwd)" != "0" ]] && { echo -e "\n${cor1}Token already exists!${scor}\n"; sleep 2; return; }
    [[ ! "$username" =~ ^[a-zA-Z0-9]+$ ]] && { echo -e "\n${cor1}Invalid token name! Use letters and numbers only!${scor}\n"; sleep 2; return; }
    [[ ${#username} -lt 2 ]] && { echo -e "\n${cor1}Token name too short! Use at least 2 characters!${scor}\n"; sleep 2; return; }
    
    echo -ne "\033[1;32mEnter Display Name: \033[1;37m "
    read display_name
    [[ -z "$display_name" ]] && { echo -e "\n${cor1}Display name cannot be empty!${scor}\n"; sleep 2; return; }
    
    echo -ne "\033[1;32mDays to expire: \033[1;37m "
    read dias
    [[ ! "$dias" =~ ^[0-9]+$ ]] && { echo -e "\n${cor1}Invalid number of days!${scor}\n"; sleep 2; return; }
    [[ $dias -lt 1 ]] && { echo -e "\n${cor1}Number of days must be greater than zero!${scor}\n"; sleep 2; return; }
    
    echo -ne "\033[1;32mConnection limit: \033[1;37m "
    read sshlimiter
    [[ ! "$sshlimiter" =~ ^[0-9]+$ ]] && { echo -e "\n${cor1}Invalid connection limit!${scor}\n"; sleep 2; return; }
    [[ $sshlimiter -lt 1 ]] && { echo -e "\n${cor1}Connection limit must be greater than zero!${scor}\n"; sleep 2; return; }
    
    echo -ne "\033[1;32mInclude password in OVPN? [y/n]: \033[1;37m "
    read respost
    
    password=$(cat /etc/SSHPlus/Token.txt)
    [[ -z "$password" ]] && { echo -e "\n${cor1}Error: Token password not found!${scor}\n"; sleep 2; return; }
    
    final=$(date "+%Y-%m-%d" -d "+$dias days")
    gui=$(date "+%d/%m/%Y" -d "+$dias days")
    pass=$(perl -e 'print crypt($ARGV[0], "password")' "$password")
    
    useradd -e "$final" -M -s /bin/false -p "$pass" "$username" >/dev/null 2>&1
    echo "$password" >/etc/SSHPlus/senha/$username
    echo "$username $sshlimiter" >>/root/usuarios.db
    
    fun_geraovpn "$username"
    
    curl -X POST "$SERVER_URL" -H "Content-Type: application/json" -d "{\"Name\":\"$display_name\",\"Key\":\"$username\",\"Valid\":\"$dias\",\"Expiration\":\"$final\"}" >/dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        echo -e "\n\033[1;32mToken created and synced with server!\033[0m"
    else
        echo -e "\n\033[1;31mFailed to sync token with server!${scor}\n"
    fi
    
    clear
    echo -e "\E[44;1;37m       PPHDEV ACCOUNT CREATED!      \E[0m"
    echo -e "\n\033[1;32mIP: \033[1;37m$IP"
    echo -e "\033[1;32mName: \033[1;37m$display_name"
    echo -e "\033[1;32mToken: \033[1;37m$username"
    echo -e "\033[1;32mExpires on: \033[1;37m$gui"
    echo -e "\033[1;32mConnection limit: \033[1;37m$sshlimiter"
    echo ""
    echo -e "\033[1;33mPress ENTER to return to MENU!\033[0m"
    read -r
}

# Rename token
fun_rename_token() {
    clear
    tput setaf 7
    tput setab 4
    tput bold
    printf '%30s%s%-15s\n' "Rename PPHDEV Token"
    tput sgr0
    echo ""
    echo -ne "\033[1;32mCurrent Token Name: \033[1;37m "
    read old_username
    [[ -z "$old_username" ]] && { echo -e "\n${cor1}Token name cannot be empty!${scor}\n"; sleep 2; return; }
    [[ "$(grep -wc "$old_username" /etc/passwd)" == "0" ]] && { echo -e "\n${cor1}Token does not exist!${scor}\n"; sleep 2; return; }
    
    echo -ne "\033[1;32mNew Token Name: \033[1;37m "
    read new_username
    [[ -z "$new_username" ]] && { echo -e "\n${cor1}New token name cannot be empty!${scor}\n"; sleep 2; return; }
    [[ "$(grep -wc "$new_username" /etc/passwd)" != "0" ]] && { echo -e "\n${cor1}New token name already exists!${scor}\n"; sleep 2; return; }
    [[ ! "$new_username" =~ ^[a-zA-Z0-9]+$ ]] && { echo -e "\n${cor1}Invalid new token name! Use letters and numbers only!${scor}\n"; sleep 2; return; }
    
    echo -ne "\033[1;32mNew Display Name: \033[1;37m "
    read new_display_name
    [[ -z "$new_display_name" ]] && { echo -e "\n${cor1}New display name cannot be empty!${scor}\n"; sleep 2; return; }
    
    sed -i "s/^$old_username:/$new_username:/" /etc/passwd
    sed -i "s/^$old_username /$new_username /" /root/usuarios.db
    mv /etc/SSHPlus/senha/$old_username /etc/SSHPlus/senha/$new_username
    rm -f /root/$old_username.ovpn /root/$old_username.zip
    fun_geraovpn "$new_username"
    
    curl -X PUT "$SERVER_URL/$old_username" -H "Content-Type: application/json" -d "{\"Name\":\"$new_display_name\",\"Key\":\"$new_username\"}" >/dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        echo -e "\n\033[1;32mToken renamed to $new_username (Name: $new_display_name) and synced with server!\033[0m"
    else
        echo -e "\n\033[1;31mFailed to sync renamed token with server!${scor}\n"
    fi
    echo ""
    echo -e "\033[1;33mPress ENTER to return to MENU!\033[0m"
    read -r
}

# Delete token
fun_delete_token() {
    clear
    tput setaf 7
    tput setab 4
    tput bold
    printf '%30s%s%-15s\n' "Delete PPHDEV Token"
    tput sgr0
    echo ""
    echo -ne "\033[1;32mToken Name to Delete: \033[1;37m "
    read username
    [[ -z "$username" ]] && { echo -e "\n${cor1}Token name cannot be empty!${scor}\n"; sleep 2; return; }
    [[ "$(grep -wc "$username" /etc/passwd)" == "0" ]] && { echo -e "\n${cor1}Token does not exist!${scor}\n"; sleep 2; return; }
    
    echo -ne "\033[1;32mConfirm deletion? [y/n]: \033[1;37m "
    read confirm
    [[ ! "$confirm" =~ ^[yY]$ ]] && { echo -e "\n\033[1;31mDeletion cancelled!${scor}\n"; sleep 2; return; }
    
    curl -X DELETE "$SERVER_URL/$username" >/dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        userdel -r "$username" >/dev/null 2>&1
        sed -i "/^$username /d" /root/usuarios.db
        rm -f /etc/SSHPlus/senha/$username
        rm -f /root/$username.ovpn /root/$username.zip
        echo -e "\n\033[1;32mToken $username deleted successfully!\033[0m"
    else
        echo -e "\n\033[1;31mFailed to delete token from server!${scor}\n"
    fi
    echo ""
    echo -e "\033[1;33mPress ENTER to return to MENU!\033[0m"
    read -r
}

# Edit OVPN host
fun_edithost() {
    clear
    echo -e "\E[44;1;37m          CHANGE OVPN HOST            \E[0m"
    echo ""
    echo -e "\033[1;33mCURRENT HOST\033[1;37m: \033[1;32m$Host"
    echo ""
    echo -e "\033[1;31m[\033[1;36m1\033[1;31m] \033[1;33mVIVO RECHARGE"
    echo -e "\033[1;31m[\033[1;36m2\033[1;31m] \033[1;33mVIVO NAVIGATE PRE"
    echo -e "\033[1;31m[\033[1;36m3\033[1;31m] \033[1;33mOPEN SOCKS \033[1;31m[\033[1;32mMODDED APP\033[1;31m]"
    echo -e "\033[1;31m[\033[1;36m4\033[1;31m] \033[1;33mOPEN SQUID \033[1;31m[\033[1;32mMODDED APP\033[1;31m]"
    echo -e "\033[1;31m[\033[1;36m5\033[1;31m] \033[1;33mVIVO MMS \033[1;31m[\033[1;37mAPN: \033[1;32mmms.vivo.com.br\033[1;31m]"
    echo -e "\033[1;31m[\033[1;36m6\033[1;31m] \033[1;33mBYPASS MODE \033[1;31m[\033[1;32mOPEN + INJECTOR\033[1;31m]"
    echo -e "\033[1;31m[\033[1;36m7\033[1;31m] \033[1;33mALL HOSTS \033[1;31m[\033[1;32m1 OVPN FOR EACH\033[1;31m]"
    echo -e "\033[1;31m[\033[1;36m8\033[1;31m] \033[1;33mEDIT MANUALLY"
    echo -e "\033[1;31m[\033[1;36m0\033[1;31m] \033[1;33mRETURN"
    echo ""
    echo -ne "\033[1;32mWHICH HOST TO USE? \033[1;37m "
    read respo
    [[ -z "$respo" ]] && { echo -e "\n\033[1;31mInvalid option!${scor}\n"; sleep 2; fun_edithost; return; }
    cert01="/etc/openvpn/client-common.txt"
    case $respo in
        1)
            echo -e "\n\033[1;32mCHANGING HOST!\033[0m\n"
            fun_althost() {
                sed -i "7,9d" $cert01
                sed -i "7i\remote $IP $PORT\nhttp-proxy-option CUSTOM-HEADER Host portalrecarga.vivo.com.br/recarga\nhttp-proxy $IP 80" $cert01
            }
            fun_bar 'fun_althost'
            echo -e "\n\033[1;32mHOST CHANGED SUCCESSFULLY!\033[0m"
            fun_geraovpn "$username"
            ;;
        2)
            echo -e "\n\033[1;32mCHANGING HOST!\033[0m\n"
            fun_althost2() {
                sed -i "7,9d" $cert01
                sed -i "7i\remote $IP $PORT\nhttp-proxy-option CUSTOM-HEADER Host navegue.vivo.com.br/pre/\nhttp-proxy $IP 80" $cert01
            }
            fun_bar 'fun_althost2'
            echo -e "\n\033[1;32mHOST CHANGED SUCCESSFULLY!\033[0m"
            fun_geraovpn "$username"
            ;;
        3)
            echo -e "\n\033[1;32mCHANGING HOST!\033[0m\n"
            fun_althostpay1() {
                sed -i "7,9d" $cert01
                sed -i "7i\remote $IP $PORT\n#payload \"HTTP/1.0 [crlf]Host: m.youtube.com[crlf]CONNECT HTTP/1.0[crlf][crlf]|[crlf]\"\nhttp-proxy $IP 8080" $cert01
            }
            fun_bar 'fun_althostpay1'
            echo -e "\n\033[1;32mHOST CHANGED SUCCESSFULLY!\033[0m"
            fun_geraovpn "$username"
            ;;
        4)
            echo -e "\n\033[1;32mCHANGING HOST!\033[0m\n"
            fun_althostpay2() {
                sed -i "7,9d" $cert01
                sed -i "7i\remote $IP $PORT\n#payload \"CONNECT 127.0.0.1:1194[split][crlf] HTTP/1.0 [crlf][crlf]#\"\nhttp-proxy $IP 80" $cert01
            }
            fun_bar 'fun_althostpay2'
            echo -e "\n\033[1;32mHOST CHANGED SUCCESSFULLY!\033[0m"
            fun_geraovpn "$username"
            ;;
        5)
            echo -e "\n\033[1;32mCHANGING HOST!\033[0m\n"
            fun_althost5() {
                sed -i "7,9d" $cert01
                sed -i "7i\remote www.vivo.com.br 8088\nhttp-proxy-option CUSTOM-HEADER Host navegue.vivo.com.br/pre/\nhttp-proxy 200.142.130.104:80" $cert01
            }
            fun_bar 'fun_althost5'
            echo -e "\n\033[1;32mHOST CHANGED SUCCESSFULLY!\033[0m"
            fun_geraovpn "$username"
            ;;
        6)
            echo -e "\n\033[1;32mCHANGING HOST!\033[0m\n"
            fun_althost6() {
                sed -i "7,9d" $cert01
                sed -i "7i\remote $IP $PORT\nroute $IP 255.255.255.255 net_gateway\nhttp-proxy 127.0.0.1 8989" $cert01
            }
            fun_bar 'fun_althost6'
            echo -e "\n\033[1;32mHOST CHANGED SUCCESSFULLY!\033[0m"
            fun_geraovpn "$username"
            ;;
        7)
            [[ ! -e "/root/$username.ovpn" ]] && fun_geraovpn "$username"
            echo -e "\n\033[1;32mCHANGING HOST!\033[0m\n"
            fun_packhost() {
                mkdir -p /root/OVPN
                local ovpn="/root/$username.ovpn"
                sed -i "7,9d" $ovpn
                sed -i "7i\remote $IP $PORT\nhttp-proxy-option CUSTOM-HEADER Host portalrecarga.vivo.com.br/recarga\nhttp-proxy $IP 80" $ovpn
                cp $ovpn /root/OVPN/$username-vivo1.ovpn
                sed -i "7,9d" $ovpn
                sed -i "7i\remote $IP $PORT\nhttp-proxy-option CUSTOM-HEADER Host navegue.vivo.com.br/pre/\nhttp-proxy $IP 80" $ovpn
                cp $ovpn /root/OVPN/$username-vivo2.ovpn
                sed -i "7,9d" $ovpn
                sed -i "7i\remote www.vivo.com.br 8088\nhttp-proxy-option CUSTOM-HEADER Host $IP:$PORT\nhttp-proxy 200.142.130.104 80" $ovpn
                cp $ovpn /root/OVPN/$username-vivo3.ovpn
                sed -i "7,9d" $ovpn
                sed -i "7i\remote $IP $PORT\nroute $IP 255.255.255.255 net_gateway\nhttp-proxy 127.0.0.1 8989" $ovpn
                cp $ovpn /root/OVPN/$username-bypass.ovpn
                sed -i "7,9d" $ovpn
                sed -i "7i\remote $IP $PORT\n#payload \"HTTP/1.0 [crlf]Host: m.youtube.com[crlf]CONNECT HTTP/1.0[crlf][crlf]|[crlf]\"\nhttp-proxy $IP 8080" $ovpn
                cp $ovpn /root/OVPN/$username-socks.ovpn
                sed -i "7,9d" $ovpn
                sed -i "7i\remote $IP $PORT\n#payload \"CONNECT 127.0.0.1:1194[split][crlf] HTTP/1.0 [crlf][crlf]#\"\nhttp-proxy $IP 80" $ovpn
                cp $ovpn /root/OVPN/$username-squid.ovpn
                cd /root/OVPN && zip $username.zip *.ovpn >/dev/null 2>&1 && cp $username.zip /root/$username.zip
                rm -rf /root/OVPN
            }
            fun_bar 'fun_packhost'
            echo -e "\n\033[1;32mHOST CHANGED SUCCESSFULLY!\033[0m"
            ;;
        8)
            echo -e "\n\033[1;32mEDITING OVPN FILE!\033[0m"
            echo -e "\033[1;31mATTENTION!\033[0m"
            echo -e "\033[1;33mTO SAVE, USE \033[1;32mCtrl + X, then Y\033[0m"
            sleep 4
            nano /etc/openvpn/client-common.txt
            echo -e "\n\033[1;32mEDITED SUCCESSFULLY!\033[0m"
            fun_geraovpn "$username"
            ;;
        0)
            echo -e "\n\033[1;31mReturning...\033[0m"
            sleep 2
            ;;
        *)
            echo -e "\n\033[1;31mInvalid option!${scor}\n"
            sleep 2
            fun_edithost
            ;;
    esac
    echo -e "\033[1;33mPress ENTER to return to MENU!\033[0m"
    read -r
}

# Main menu
fun_main_menu() {
    clear
    tput setaf 7
    tput setab 4
    tput bold
    printf '%30s%s%-15s\n' "PPHDEV Account Management"
    tput sgr0
    echo ""
    echo -e "\033[1;31m[\033[1;36m1\033[1;31m] \033[1;33mCreate Token"
    echo -e "\033[1;31m[\033[1;36m2\033[1;31m] \033[1;33mRename Token"
    echo -e "\033[1;31m[\033[1;36m3\033[1;31m] \033[1;33mDelete Token"
    echo -e "\033[1;31m[\033[1;36m4\033[1;31m] \033[1;33mChange Host"
    echo -e "\033[1;31m[\033[1;36m5\033[1;31m] \033[1;33mYou-server Token ADD"
    echo -e "\033[1;31m[\033[1;36m0\033[1;31m] \033[1;33mExit"
    echo ""
    echo -ne "\033[1;32mWhat do you want to do? \033[1;37m "
    read option
    case $option in
        1) fun_usertoken ;;
        2) fun_rename_token ;;
        3) fun_delete_token ;;
        4) configure_hosts; fun_edithost ;;
        5) fun_youip_token_add ;;
        0) exit 0 ;;
        *) echo -e "\n\033[1;31mInvalid option!${scor}\n"; sleep 2; fun_main_menu ;;
    esac
}

# Initialize and run
init_requirements
configure_hosts
fun_main_menu